{"ast":null,"code":"export const getArabicNumber = async romanNumber => {\n  switch (romanNumber) {\n    case \"IV\":\n      return \"4\";\n\n    case \"III\":\n      return \"3\";\n\n    case \"II\":\n      return \"2\";\n\n    case \"I\":\n      return \"1\";\n\n    default:\n      return \"unknown\";\n  }\n};\nexport const getRank = async (leagueInfo, rankType) => {\n  for (let i = 0; i < leagueInfo.length; i++) {\n    if (leagueInfo[i].queueType === rankType) {\n      const arabicNumber = await getArabicNumber(leagueInfo[i].rank);\n      return `${leagueInfo[i].tier.toLowerCase()}_${arabicNumber}`;\n    }\n  }\n\n  return \"default\";\n};\n\nconst getLane = async matchJSON => {\n  const lane = matchJSON.lane;\n  const role = matchJSON.role; //    Role: DUO, DUO_CARRY, DUO_SUPPORT, NONE, and SOLO\n  //    Lane: MID, TOP, BOTTOM, JUNGLE, NONE\n\n  if (lane === \"MID\" && role === \"SOLO\") {\n    return \"mid\";\n  } else if (lane === \"TOP\" && role === \"SOLO\") {\n    return \"top\";\n  } else if (lane === \"JUNGLE\" && role === \"NONE\") {\n    return \"jgl\";\n  } else if (lane === \"BOTTOM\" && role === \"DUO_SUPPORT\") {\n    return \"sup\";\n  } else if (lane === \"BOTTOM\" && role === \"DUO_CARRY\") {\n    return \"adc\";\n  } else {\n    return \"none\";\n  }\n};\n\nexport const getOverallLane = async matchList => {\n  let laneMap = new Map();\n  laneMap.set(\"mid\", 0);\n  laneMap.set(\"top\", 0);\n  laneMap.set(\"jgl\", 0);\n  laneMap.set(\"sup\", 0);\n  laneMap.set(\"adc\", 0);\n  let overallLane = \"none\";\n  let i = 0;\n  let data = 0;\n\n  while (data < 11) {\n    if (matchlist.matches !== undefined && matchlist.matches[i] !== undefined && i < 30) {\n      const currentLane = await getLane(matchlist.matches[i]);\n\n      if (currentLane !== \"none\") {\n        laneMap.set(currentLane, laneMap.get(currentLane) + 1);\n        data++;\n      }\n    }\n\n    i++;\n  }\n\n  let overallLaneValue = laneMap.get(\"mid\");\n\n  for (let lane of laneMap.keys()) {\n    if (laneMap.get(lane) > overallLaneValue) {\n      overallLane = laneMap.get(lane);\n    }\n  }\n\n  return overallLane;\n};","map":{"version":3,"sources":["C:/website/client/src/App/pages/myslibros/LeagueOfLegendsApi.js"],"names":["getArabicNumber","romanNumber","getRank","leagueInfo","rankType","i","length","queueType","arabicNumber","rank","tier","toLowerCase","getLane","matchJSON","lane","role","getOverallLane","matchList","laneMap","Map","set","overallLane","data","matchlist","matches","undefined","currentLane","get","overallLaneValue","keys"],"mappings":"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","sourcesContent":["export const getArabicNumber = async (romanNumber) => {\r\n    switch (romanNumber) {\r\n        case \"IV\":\r\n            return \"4\";\r\n        case \"III\":\r\n            return \"3\";\r\n        case \"II\":\r\n            return \"2\";\r\n        case \"I\":\r\n            return \"1\";\r\n        default:\r\n            return \"unknown\";\r\n    }\r\n}\r\n\r\nexport const getRank = async (leagueInfo, rankType) => {\r\n    for (let i = 0; i < leagueInfo.length; i++) {\r\n        if (leagueInfo[i].queueType === rankType) {\r\n            const arabicNumber = await getArabicNumber(leagueInfo[i].rank);\r\n            return `${leagueInfo[i].tier.toLowerCase()}_${arabicNumber}`;\r\n        }\r\n    }\r\n    return \"default\";\r\n}\r\n\r\nconst getLane = async (matchJSON) => {\r\n    const lane = matchJSON.lane;\r\n    const role = matchJSON.role;\r\n//    Role: DUO, DUO_CARRY, DUO_SUPPORT, NONE, and SOLO\r\n//    Lane: MID, TOP, BOTTOM, JUNGLE, NONE\r\n    if (lane === \"MID\" && role === \"SOLO\") {\r\n        return \"mid\";\r\n    } else if (lane === \"TOP\" && role === \"SOLO\") {\r\n        return \"top\";\r\n    } else if (lane === \"JUNGLE\" && role === \"NONE\") {\r\n        return \"jgl\";\r\n    } else if (lane === \"BOTTOM\" && role === \"DUO_SUPPORT\") {\r\n        return \"sup\";\r\n    } else if (lane === \"BOTTOM\" && role === \"DUO_CARRY\") {\r\n        return \"adc\";\r\n    } else {\r\n        return \"none\";\r\n    }\r\n}\r\n\r\nexport const getOverallLane = async (matchList) => {\r\n    let laneMap = new Map();\r\n    laneMap.set(\"mid\", 0);\r\n    laneMap.set(\"top\", 0); \r\n    laneMap.set(\"jgl\", 0);\r\n    laneMap.set(\"sup\", 0); \r\n    laneMap.set(\"adc\", 0);\r\n    let overallLane = \"none\";\r\n\r\n    let i = 0;\r\n    let data = 0;\r\n    while (data < 11) {\r\n        if (matchlist.matches !== undefined && matchlist.matches[i] !== undefined && i < 30) {\r\n            const currentLane = await getLane(matchlist.matches[i]);\r\n            if (currentLane !== \"none\") {\r\n                laneMap.set(currentLane, laneMap.get(currentLane) + 1);\r\n                data++;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    let overallLaneValue = laneMap.get(\"mid\");\r\n    for (let lane of laneMap.keys()) {\r\n        if (laneMap.get(lane) > overallLaneValue) {\r\n            overallLane = laneMap.get(lane);\r\n        }\r\n    }\r\n    return overallLane;\r\n}"]},"metadata":{},"sourceType":"module"}