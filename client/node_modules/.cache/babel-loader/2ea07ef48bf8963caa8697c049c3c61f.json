{"ast":null,"code":"var _jsxFileName = \"C:\\\\website\\\\client\\\\src\\\\App\\\\pages\\\\myslibros\\\\LeagueProfile.js\";\n//TODO: own css for myslibros page\nimport React, { useEffect, useState } from 'react';\nimport '../../App.css';\nimport { getPlayerIconPNGLink, getPlayerLevel, getFlexRank, get_Solo_Duo_Rank } from './LeagueOfLegendsApi.js';\n/**\r\n * League player profile for Myslibros\r\n */\n\nfunction LeagueProfile(props) {\n  /*\r\n      useEffect(() => {\r\n          fetchPlayers();\r\n      }, []); \r\n      */\n  //const [player, setPlayer] = useState([]);\n  var post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\n  useEffect(() => {\n    //send post request\n    var xmlhttp = new XMLHttpRequest();\n\n    xmlhttp.onreadystatechange = function () {\n      /* .. */\n    };\n\n    xmlhttp.open(\"POST\", post_url);\n    xmlhttp.withCredentials = true;\n    xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n    const json = {\n      \"summonerName\": props.leagueName,\n      \"id\": \"3\"\n    };\n    xmlhttp.send(json); //retreve post request\n\n    (async () => {\n      const rawResponse = await fetch(post_url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        } //,\n        //body: JSON.stringify({a: 1, b: 'Textual content'})\n\n      }); //const content = await rawResponse.json();\n      //console.log(rawResponse);\n    })();\n  }, []);\n  /*\r\n  \n  //BAD !!! TODO: http://localhost:3001/api/leagueoflegends/players/{playerName} post fetch data\r\n   let player = {}; \r\n   useEffect(() => {\r\n       fetch('/api/leagueoflegends/players')\r\n       .then(res => res.json())\r\n       .then(players => {\r\n           let isCached = false;\r\n           for (var i = 0; i < players.length; i++) {\r\n               if (players[i].summonerName === props.leagueName) {\r\n                   player = players[i];\r\n                   isCached = true;\r\n                   break;\r\n               }\r\n           }\r\n           if (isCached === false) {\r\n               console.log(props.leagueName + \" musst be cached\");\r\n               //cache player\r\n  \n     \r\n               var post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\r\n                 //send post request\r\n               var xmlhttp = new XMLHttpRequest();\r\n               xmlhttp.onreadystatechange = function () { };\r\n               xmlhttp.open(\"POST\", post_url);\r\n               xmlhttp.withCredentials = true;\r\n               xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n               const json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\n               xmlhttp.send({});\r\n                 //retreve post request\r\n               (async () => {\r\n                   const rawResponse = await fetch(post_url, {\r\n                     method: 'POST',\r\n                     headers: {\r\n                       'Accept': 'application/json',\r\n                       'Content-Type': 'application/json'\r\n                     }\r\n                     //,\r\n                     //body: JSON.stringify({a: 1, b: 'Textual content'})\r\n                   });\r\n                   //const content = await rawResponse.json();\r\n                   //console.log(rawResponse);\r\n                 })();\r\n             }\r\n       }).catch((error) => {\r\n           //player isnt in cache\r\n           //=> add him to cache\r\n           console.error('Error:', error);\r\n       });\r\n   }, [])\r\n   */\n\n  /*const fetchPlayers = async () => {\r\n      var json = {};\r\n      json.name = props.leagueName;\r\n      json.level = fetch('/api/leagueoflegends/players')\r\n          .then(res => res.json())\r\n          .then(players => ) \r\n          \r\n          \r\n          //await getPlayerLevel(props.leagueName);\r\n      json.iconSrc = await getPlayerIconPNGLink(props.leagueName);\r\n      json.flexRank = await getFlexRank(props.leagueName);\r\n      json.soloDuoRank = await get_Solo_Duo_Rank(props.leagueName);\r\n      //json.lane = await getOverallLane(props.leagueName);\r\n      const player = JSON.parse(JSON.stringify(json));\r\n      setPlayer(player);\r\n    };*/\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile-header-picture-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile-header-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default LeagueProfile;","map":{"version":3,"sources":["C:/website/client/src/App/pages/myslibros/LeagueProfile.js"],"names":["React","useEffect","useState","getPlayerIconPNGLink","getPlayerLevel","getFlexRank","get_Solo_Duo_Rank","LeagueProfile","props","post_url","leagueName","xmlhttp","XMLHttpRequest","onreadystatechange","open","withCredentials","setRequestHeader","json","send","rawResponse","fetch","method","headers"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,SAAQC,oBAAR,EAA8BC,cAA9B,EAA8CC,WAA9C,EAA2DC,iBAA3D,QAAmF,yBAAnF;AAEA;;;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC9B;;;;;AAKG;AAEA,MAAIC,QAAQ,GAAG,uDAAuDD,KAAK,CAACE,UAA5E;AAEAT,EAAAA,SAAS,CAAC,MAAM;AAGnB;AACA,QAAIU,OAAO,GAAG,IAAIC,cAAJ,EAAd;;AACAD,IAAAA,OAAO,CAACE,kBAAR,GAA6B,YAAY;AAAE;AAAU,KAArD;;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,MAAb,EAAqBL,QAArB;AACAE,IAAAA,OAAO,CAACI,eAAR,GAA0B,IAA1B;AACAJ,IAAAA,OAAO,CAACK,gBAAR,CAAyB,cAAzB,EAAyC,kBAAzC;AACA,UAAMC,IAAI,GAAG;AAAC,sBAAgBT,KAAK,CAACE,UAAvB;AAAmC,YAAO;AAA1C,KAAb;AACAC,IAAAA,OAAO,CAACO,IAAR,CAAaD,IAAb,EAVmB,CAYnB;;AACA,KAAC,YAAY;AACT,YAAME,WAAW,GAAG,MAAMC,KAAK,CAACX,QAAD,EAAW;AACxCY,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB;AAFT,SAF+B,CAMxC;AACA;;AAPwC,OAAX,CAA/B,CADS,CAUT;AACA;AACD,KAZH;AAgBI,GA7BQ,EA6BN,EA7BM,CAAT;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DC;;;;;;;;;;;;;;;;;AAiBA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAII;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,eAUI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ;AAqBH;;AAED,eAAef,aAAf","sourcesContent":["//TODO: own css for myslibros page\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../../App.css';\r\nimport {getPlayerIconPNGLink, getPlayerLevel, getFlexRank, get_Solo_Duo_Rank} from './LeagueOfLegendsApi.js';\r\n\r\n/**\r\n * League player profile for Myslibros\r\n */\r\nfunction LeagueProfile(props) {\r\n/*\r\n    useEffect(() => {\r\n        fetchPlayers();\r\n    }, []); \r\n    */\r\n   //const [player, setPlayer] = useState([]);\r\n\r\n   var post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\r\n\r\n   useEffect(() => {\r\n\r\n\r\n//send post request\r\nvar xmlhttp = new XMLHttpRequest();\r\nxmlhttp.onreadystatechange = function () { /* .. */ };\r\nxmlhttp.open(\"POST\", post_url);\r\nxmlhttp.withCredentials = true;\r\nxmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\nconst json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\nxmlhttp.send(json);\r\n\r\n//retreve post request\r\n(async () => {\r\n    const rawResponse = await fetch(post_url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n      //,\r\n      //body: JSON.stringify({a: 1, b: 'Textual content'})\r\n    });\r\n    //const content = await rawResponse.json();\r\n    //console.log(rawResponse);\r\n  })();\r\n\r\n\r\n\r\n   }, []);\r\n\r\n\r\n\r\n   /*\r\n\r\n\r\n   //BAD !!! TODO: http://localhost:3001/api/leagueoflegends/players/{playerName} post fetch data\r\n    let player = {}; \r\n    useEffect(() => {\r\n        fetch('/api/leagueoflegends/players')\r\n        .then(res => res.json())\r\n        .then(players => {\r\n            let isCached = false;\r\n            for (var i = 0; i < players.length; i++) {\r\n                if (players[i].summonerName === props.leagueName) {\r\n                    player = players[i];\r\n                    isCached = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isCached === false) {\r\n                console.log(props.leagueName + \" musst be cached\");\r\n                //cache player\r\n\r\n\r\n\r\n    \r\n                var post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\r\n\r\n                //send post request\r\n                var xmlhttp = new XMLHttpRequest();\r\n                xmlhttp.onreadystatechange = function () { };\r\n                xmlhttp.open(\"POST\", post_url);\r\n                xmlhttp.withCredentials = true;\r\n                xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                const json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\n                xmlhttp.send({});\r\n\r\n                //retreve post request\r\n                (async () => {\r\n                    const rawResponse = await fetch(post_url, {\r\n                      method: 'POST',\r\n                      headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                      }\r\n                      //,\r\n                      //body: JSON.stringify({a: 1, b: 'Textual content'})\r\n                    });\r\n                    //const content = await rawResponse.json();\r\n                    //console.log(rawResponse);\r\n                  })();\r\n\r\n            }\r\n        }).catch((error) => {\r\n            //player isnt in cache\r\n            //=> add him to cache\r\n            console.error('Error:', error);\r\n        });\r\n    }, [])\r\n\r\n  */\r\n\r\n    \r\n        \r\n\r\n    /*const fetchPlayers = async () => {\r\n        var json = {};\r\n        json.name = props.leagueName;\r\n        json.level = fetch('/api/leagueoflegends/players')\r\n            .then(res => res.json())\r\n            .then(players => ) \r\n            \r\n            \r\n            //await getPlayerLevel(props.leagueName);\r\n        json.iconSrc = await getPlayerIconPNGLink(props.leagueName);\r\n        json.flexRank = await getFlexRank(props.leagueName);\r\n        json.soloDuoRank = await get_Solo_Duo_Rank(props.leagueName);\r\n        //json.lane = await getOverallLane(props.leagueName);\r\n        const player = JSON.parse(JSON.stringify(json));\r\n        setPlayer(player);\r\n      };*/\r\n    \r\n    return (\r\n        <div className=\"league-profile\">\r\n            <div className=\"league-profile-header\">\r\n                <div className=\"league-profile-header-picture-container\">\r\n                    {/*<img className=\"league-profile-picture\" src={player.iconSrc} alt=\"\"></img>*/}\r\n                </div>\r\n                <div className=\"league-profile-header-text\">\r\n                    {/*<h1>{player.name}</h1>\r\n                    <h1>Level: {player.level}</h1>*/}\r\n                </div>\r\n            </div>\r\n            <div className=\"league-info\">\r\n                {\r\n                    //img for solo duo rank: `opgg-static.akamaized.net/images/medals/${player.soloDuoRank}.png?image=q_auto&v=1`\r\n                    //img for flex: `opgg-static.akamaized.net/images/medals/${player.flexRank}.png?image=q_auto&v=1`\r\n                }\r\n                {/*<h1>{player.soloDuoRank}</h1>\r\n                <h1>{player.flexRank}</h1>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeagueProfile;"]},"metadata":{},"sourceType":"module"}