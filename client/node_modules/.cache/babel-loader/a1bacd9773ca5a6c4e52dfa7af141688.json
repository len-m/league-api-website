{"ast":null,"code":"const https = require('https');\n\nfunction makeAnHTTPSCall(URL) {\n  return new Promise(function (resolve, reject) {\n    https.get(URL, resp => {\n      let data = ''; // A chunk of data has been recieved.\n\n      resp.on('data', chunk => {\n        data += chunk;\n      }); // The whole response has been received.\n\n      resp.on('end', () => {\n        let parsedData = JSON.parse(data);\n\n        if (parsedData.status) {\n          if (parsedData.status.status_code == '403') {\n            reject('Forbidden. Ensure api key is up to date.');\n          } else {\n            reject(parsedData);\n          }\n        } else {\n          resolve(parsedData);\n        }\n      });\n    }).on(\"error\", err => {\n      reject(\"Error: \" + err.message);\n    });\n  });\n}\n\nmodule.exports = {\n  makeAnHTTPSCall: makeAnHTTPSCall\n};","map":{"version":3,"sources":["C:/website/node_modules/leagueapiwrapper/LeagueAPI/HttpsCaller.js"],"names":["https","require","makeAnHTTPSCall","URL","Promise","resolve","reject","get","resp","data","on","chunk","parsedData","JSON","parse","status","status_code","err","message","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EACA;AACC,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC5CN,IAAAA,KAAK,CAACO,GAAN,CAAUJ,GAAV,EAAgBK,IAAD,IAAU;AACvB,UAAIC,IAAI,GAAG,EAAX,CADuB,CAGvB;;AACAD,MAAAA,IAAI,CAACE,EAAL,CAAQ,MAAR,EAAiBC,KAAD,IAAW;AAC5BF,QAAAA,IAAI,IAAIE,KAAR;AACE,OAFD,EAJuB,CAQvB;;AACAH,MAAAA,IAAI,CAACE,EAAL,CAAQ,KAAR,EAAe,MAAM;AACrB,YAAIE,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAjB;;AAEA,YAAIG,UAAU,CAACG,MAAf,EACA;AACC,cAAIH,UAAU,CAACG,MAAX,CAAkBC,WAAlB,IAAiC,KAArC,EACA;AACCV,YAAAA,MAAM,CAAC,0CAAD,CAAN;AACA,WAHD,MAKA;AACCA,YAAAA,MAAM,CAACM,UAAD,CAAN;AACA;AACD,SAVD,MAYA;AACCP,UAAAA,OAAO,CAACO,UAAD,CAAP;AACA;AACA,OAlBD;AAoBD,KA7BD,EA6BGF,EA7BH,CA6BM,OA7BN,EA6BgBO,GAAD,IAAS;AACtBX,MAAAA,MAAM,CAAC,YAAYW,GAAG,CAACC,OAAjB,CAAN;AACD,KA/BD;AAgCA,GAjCM,CAAP;AAkCA;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAClB,EAAAA,eAAe,EAAGA;AAAnB,CAAjB","sourcesContent":["const https = require('https');\r\nfunction makeAnHTTPSCall(URL)\r\n{\r\n\treturn new Promise(function(resolve, reject) {\r\n\t\thttps.get(URL, (resp) => {\r\n\t\t  let data = '';\r\n\r\n\t\t  // A chunk of data has been recieved.\r\n\t\t  resp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t  });\r\n\r\n\t\t  // The whole response has been received.\r\n\t\t  resp.on('end', () => {\r\n\t\t\t\tlet parsedData = JSON.parse(data);\r\n\r\n\t\t\t\tif (parsedData.status)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (parsedData.status.status_code == '403')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treject('Forbidden. Ensure api key is up to date.');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treject(parsedData);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve(parsedData);\r\n\t\t\t\t}\r\n\t\t  });\r\n\r\n\t\t}).on(\"error\", (err) => {\r\n\t\t  reject(\"Error: \" + err.message);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nmodule.exports = {makeAnHTTPSCall : makeAnHTTPSCall };"]},"metadata":{},"sourceType":"script"}