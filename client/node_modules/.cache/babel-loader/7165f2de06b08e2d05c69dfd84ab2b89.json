{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst errors_1 = require(\"../errors\");\n\nconst http_status_codes_1 = require(\"http-status-codes\");\n\nconst dotenv_1 = require(\"dotenv\");\n\nconst Generic_error_1 = require(\"../errors/Generic.error\");\n\nconst rate_limit_error_1 = require(\"../errors/rate-limit.error\");\n\nconst base_utils_1 = require(\"./base.utils\");\n\nconst service_unavailable_error_1 = require(\"../errors/service-unavailable.error\");\n\nconst base_const_1 = require(\"./base.const\");\n\nconst logger_base_1 = require(\"./logger.base\");\n\nconst request_base_1 = require(\"./request.base\");\n\ndotenv_1.config();\n\nclass BaseApi {\n  constructor(param) {\n    this.game = base_const_1.BaseApiGames.LOL;\n    this.baseUrl = base_const_1.BaseConstants.BASE_URL;\n    this.rateLimitRetry = true;\n    this.rateLimitRetryAttempts = base_const_1.BaseConstants.RETRY_ATTEMPTS;\n    this.debug = {\n      logTime: false,\n      logUrls: false,\n      logRatelimits: false\n    };\n    this.key = process.env.RIOT_API_KEY || '';\n\n    if (typeof param === 'string') {\n      this.key = param;\n    } else if (param) {\n      if (typeof param.key === 'string') {\n        this.key = param.key;\n      }\n\n      this.setParams(param);\n    }\n  }\n\n  setParams(param) {\n    if (typeof param.rateLimitRetry !== 'undefined') {\n      this.rateLimitRetry = param.rateLimitRetry;\n    }\n\n    if (typeof param.rateLimitRetryAttempts !== 'undefined') {\n      this.rateLimitRetryAttempts = param.rateLimitRetryAttempts;\n    }\n\n    if (typeof param.debug !== 'undefined') {\n      if (typeof param.debug.logTime !== 'undefined') {\n        _.set(this.debug, 'logTime', param.debug.logTime);\n      }\n\n      if (typeof param.debug.logUrls !== 'undefined') {\n        _.set(this.debug, 'logUrls', param.debug.logUrls);\n      }\n\n      if (typeof param.debug.logRatelimits !== 'undefined') {\n        _.set(this.debug, 'logRatelimits', param.debug.logRatelimits);\n      }\n    }\n\n    this.concurrency = param.concurrency;\n\n    if (typeof param.concurrency !== 'undefined') {\n      request_base_1.RequestBase.setConcurrency(param.concurrency);\n    } else {\n      request_base_1.RequestBase.setConcurrency(Infinity);\n    }\n  }\n\n  getRateLimits(headers) {\n    return {\n      Type: _.get(headers, 'x-rate-limit-type', null),\n      AppRateLimit: _.get(headers, 'x-app-rate-limit', null),\n      AppRateLimitCount: _.get(headers, 'x-app-rate-limit-count', null),\n      MethodRateLimit: _.get(headers, 'x-method-rate-limit'),\n      MethodRatelimitCount: _.get(headers, 'x-method-rate-limit-count', null),\n      RetryAfter: +_.get(headers, 'retry-after', 0),\n      EdgeTraceId: _.get(headers, 'x-riot-edge-trace-id')\n    };\n  }\n\n  getBaseUrl() {\n    return this.baseUrl.replace(':game', this.game);\n  }\n\n  getApiUrl(endpoint, params) {\n    const {\n      prefix,\n      version,\n      path\n    } = endpoint;\n    const basePath = `${prefix}/v${version}/${path}`;\n    const re = /\\$\\(([^\\)]+)?\\)/g;\n    let base = `${this.getBaseUrl()}/${basePath}`;\n    let match; // tslint:disable:no-conditional-assignment\n\n    while (match = re.exec(base)) {\n      const [key] = match;\n      const value = encodeURI(String(params[match[1]]));\n      base = base.replace(key, value);\n      re.lastIndex = 0;\n    }\n\n    return base;\n  }\n\n  isRateLimitError(e) {\n    if (!e) {\n      return false;\n    }\n\n    const {\n      statusCode = e.status\n    } = e || e.error;\n    return statusCode === http_status_codes_1.TOO_MANY_REQUESTS;\n  }\n\n  isServiceUnavailableError(e) {\n    if (!e) {\n      return false;\n    }\n\n    const {\n      statusCode = e.status\n    } = e || e.error;\n    return statusCode === http_status_codes_1.SERVICE_UNAVAILABLE;\n  }\n\n  getError(e) {\n    const headers = this.getRateLimits(_.get(e, 'response.headers'));\n\n    if (this.isRateLimitError(e)) {\n      return new rate_limit_error_1.RateLimitError(headers);\n    }\n\n    if (this.isServiceUnavailableError(e)) {\n      return new service_unavailable_error_1.ServiceUnavailable(headers, e);\n    } // Otherwise generic error\n\n\n    return new Generic_error_1.GenericError(headers, e);\n  }\n\n  internalRequest(options) {\n    return request_base_1.RequestBase.request(options);\n  }\n\n  retryRateLimit(region, endpoint, params, e) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let baseError = this.getError(e);\n      const isRateLimitError = this.isRateLimitError(e) || this.isServiceUnavailableError(e);\n\n      if (!this.rateLimitRetry || !isRateLimitError || this.rateLimitRetryAttempts < 1) {\n        throw baseError;\n      }\n\n      const forceError = true;\n\n      for (let i = 0; i < this.rateLimitRetryAttempts; i++) {\n        try {\n          const response = yield this.request(region, endpoint, params, forceError);\n          return response;\n        } catch (error) {\n          const parseError = this.getError(error); // Isn't rate limit error\n\n          if (!this.isRateLimitError(error) && !this.isServiceUnavailableError(error)) {\n            throw parseError;\n          } // Set a new attemp\n\n\n          const {\n            rateLimits: {\n              RetryAfter\n            }\n          } = parseError;\n          const waitSeconds = this.isServiceUnavailableError(e) ? base_const_1.BaseConstants.SERVICE_UNAVAILABLE : base_const_1.BaseConstants.RATE_LIMIT;\n          const msToWait = (RetryAfter || 0) * 1000 + waitSeconds * 1000 * Math.random(); // Log\n\n          if (this.debug.logRatelimits) {\n            logger_base_1.Logger.rateLimit(endpoint, msToWait);\n          } // Wait\n\n\n          yield base_utils_1.waiter(msToWait);\n        }\n      } // Throw rate limit\n\n\n      throw baseError;\n    });\n  }\n\n  getParam() {\n    return {\n      key: this.key,\n      rateLimitRetry: this.rateLimitRetry,\n      rateLimitRetryAttempts: this.rateLimitRetryAttempts,\n      concurrency: this.concurrency,\n      debug: this.debug\n    };\n  }\n\n  request(region, endpoint, params, forceError, qs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.key) {\n        throw new errors_1.ApiKeyNotFound();\n      } // Url params\n\n\n      params = params || {};\n      params.region = region.toLowerCase(); // Format\n\n      const uri = this.getApiUrl(endpoint, params); // Logger\n\n      if (this.debug.logTime) {\n        logger_base_1.Logger.start(endpoint, uri);\n      }\n\n      const options = {\n        uri,\n        method: 'GET',\n        headers: {\n          Origin: null,\n          'X-Riot-Token': this.key\n        },\n        qs,\n        useQuerystring: true,\n        resolveWithFullResponse: true,\n        json: true\n      };\n\n      if (this.debug.logUrls) {\n        logger_base_1.Logger.uri(options, endpoint);\n      }\n\n      try {\n        const apiResponse = yield this.internalRequest(options);\n        const {\n          body,\n          headers\n        } = apiResponse;\n        return {\n          rateLimits: this.getRateLimits(headers),\n          response: body\n        };\n      } catch (e) {\n        if (forceError) {\n          throw e;\n        }\n\n        return yield this.retryRateLimit(region, endpoint, params, e);\n      } finally {\n        if (this.debug.logTime) {\n          logger_base_1.Logger.end(endpoint, uri);\n        }\n      }\n    });\n  }\n\n}\n\nexports.BaseApi = BaseApi;","map":{"version":3,"sources":["C:/website/node_modules/twisted/dist/base/base.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importStar","mod","__esModule","k","Object","hasOwnProperty","call","defineProperty","exports","_","require","errors_1","http_status_codes_1","dotenv_1","Generic_error_1","rate_limit_error_1","base_utils_1","service_unavailable_error_1","base_const_1","logger_base_1","request_base_1","config","BaseApi","constructor","param","game","BaseApiGames","LOL","baseUrl","BaseConstants","BASE_URL","rateLimitRetry","rateLimitRetryAttempts","RETRY_ATTEMPTS","debug","logTime","logUrls","logRatelimits","key","process","env","RIOT_API_KEY","setParams","set","concurrency","RequestBase","setConcurrency","Infinity","getRateLimits","headers","Type","get","AppRateLimit","AppRateLimitCount","MethodRateLimit","MethodRatelimitCount","RetryAfter","EdgeTraceId","getBaseUrl","replace","getApiUrl","endpoint","params","prefix","version","path","basePath","re","base","match","exec","encodeURI","String","lastIndex","isRateLimitError","statusCode","status","error","TOO_MANY_REQUESTS","isServiceUnavailableError","SERVICE_UNAVAILABLE","getError","RateLimitError","ServiceUnavailable","GenericError","internalRequest","options","request","retryRateLimit","region","baseError","forceError","i","response","parseError","rateLimits","waitSeconds","RATE_LIMIT","msToWait","Math","random","Logger","rateLimit","waiter","getParam","qs","ApiKeyNotFound","toLowerCase","uri","start","method","Origin","useQuerystring","resolveWithFullResponse","json","apiResponse","body","end"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = __importStar(require(\"lodash\"));\nconst errors_1 = require(\"../errors\");\nconst http_status_codes_1 = require(\"http-status-codes\");\nconst dotenv_1 = require(\"dotenv\");\nconst Generic_error_1 = require(\"../errors/Generic.error\");\nconst rate_limit_error_1 = require(\"../errors/rate-limit.error\");\nconst base_utils_1 = require(\"./base.utils\");\nconst service_unavailable_error_1 = require(\"../errors/service-unavailable.error\");\nconst base_const_1 = require(\"./base.const\");\nconst logger_base_1 = require(\"./logger.base\");\nconst request_base_1 = require(\"./request.base\");\ndotenv_1.config();\nclass BaseApi {\n    constructor(param) {\n        this.game = base_const_1.BaseApiGames.LOL;\n        this.baseUrl = base_const_1.BaseConstants.BASE_URL;\n        this.rateLimitRetry = true;\n        this.rateLimitRetryAttempts = base_const_1.BaseConstants.RETRY_ATTEMPTS;\n        this.debug = {\n            logTime: false,\n            logUrls: false,\n            logRatelimits: false\n        };\n        this.key = process.env.RIOT_API_KEY || '';\n        if (typeof param === 'string') {\n            this.key = param;\n        }\n        else if (param) {\n            if (typeof param.key === 'string') {\n                this.key = param.key;\n            }\n            this.setParams(param);\n        }\n    }\n    setParams(param) {\n        if (typeof param.rateLimitRetry !== 'undefined') {\n            this.rateLimitRetry = param.rateLimitRetry;\n        }\n        if (typeof param.rateLimitRetryAttempts !== 'undefined') {\n            this.rateLimitRetryAttempts = param.rateLimitRetryAttempts;\n        }\n        if (typeof param.debug !== 'undefined') {\n            if (typeof param.debug.logTime !== 'undefined') {\n                _.set(this.debug, 'logTime', param.debug.logTime);\n            }\n            if (typeof param.debug.logUrls !== 'undefined') {\n                _.set(this.debug, 'logUrls', param.debug.logUrls);\n            }\n            if (typeof param.debug.logRatelimits !== 'undefined') {\n                _.set(this.debug, 'logRatelimits', param.debug.logRatelimits);\n            }\n        }\n        this.concurrency = param.concurrency;\n        if (typeof param.concurrency !== 'undefined') {\n            request_base_1.RequestBase.setConcurrency(param.concurrency);\n        }\n        else {\n            request_base_1.RequestBase.setConcurrency(Infinity);\n        }\n    }\n    getRateLimits(headers) {\n        return {\n            Type: _.get(headers, 'x-rate-limit-type', null),\n            AppRateLimit: _.get(headers, 'x-app-rate-limit', null),\n            AppRateLimitCount: _.get(headers, 'x-app-rate-limit-count', null),\n            MethodRateLimit: _.get(headers, 'x-method-rate-limit'),\n            MethodRatelimitCount: _.get(headers, 'x-method-rate-limit-count', null),\n            RetryAfter: +_.get(headers, 'retry-after', 0),\n            EdgeTraceId: _.get(headers, 'x-riot-edge-trace-id')\n        };\n    }\n    getBaseUrl() {\n        return this.baseUrl.replace(':game', this.game);\n    }\n    getApiUrl(endpoint, params) {\n        const { prefix, version, path } = endpoint;\n        const basePath = `${prefix}/v${version}/${path}`;\n        const re = /\\$\\(([^\\)]+)?\\)/g;\n        let base = `${this.getBaseUrl()}/${basePath}`;\n        let match;\n        // tslint:disable:no-conditional-assignment\n        while (match = re.exec(base)) {\n            const [key] = match;\n            const value = encodeURI(String(params[match[1]]));\n            base = base.replace(key, value);\n            re.lastIndex = 0;\n        }\n        return base;\n    }\n    isRateLimitError(e) {\n        if (!e) {\n            return false;\n        }\n        const { statusCode = e.status } = e || e.error;\n        return statusCode === http_status_codes_1.TOO_MANY_REQUESTS;\n    }\n    isServiceUnavailableError(e) {\n        if (!e) {\n            return false;\n        }\n        const { statusCode = e.status } = e || e.error;\n        return statusCode === http_status_codes_1.SERVICE_UNAVAILABLE;\n    }\n    getError(e) {\n        const headers = this.getRateLimits(_.get(e, 'response.headers'));\n        if (this.isRateLimitError(e)) {\n            return new rate_limit_error_1.RateLimitError(headers);\n        }\n        if (this.isServiceUnavailableError(e)) {\n            return new service_unavailable_error_1.ServiceUnavailable(headers, e);\n        }\n        // Otherwise generic error\n        return new Generic_error_1.GenericError(headers, e);\n    }\n    internalRequest(options) {\n        return request_base_1.RequestBase.request(options);\n    }\n    retryRateLimit(region, endpoint, params, e) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let baseError = this.getError(e);\n            const isRateLimitError = this.isRateLimitError(e) || this.isServiceUnavailableError(e);\n            if (!this.rateLimitRetry || !isRateLimitError || this.rateLimitRetryAttempts < 1) {\n                throw baseError;\n            }\n            const forceError = true;\n            for (let i = 0; i < this.rateLimitRetryAttempts; i++) {\n                try {\n                    const response = yield this.request(region, endpoint, params, forceError);\n                    return response;\n                }\n                catch (error) {\n                    const parseError = this.getError(error);\n                    // Isn't rate limit error\n                    if (!this.isRateLimitError(error) && !this.isServiceUnavailableError(error)) {\n                        throw parseError;\n                    }\n                    // Set a new attemp\n                    const { rateLimits: { RetryAfter } } = parseError;\n                    const waitSeconds = this.isServiceUnavailableError(e) ?\n                        base_const_1.BaseConstants.SERVICE_UNAVAILABLE :\n                        base_const_1.BaseConstants.RATE_LIMIT;\n                    const msToWait = ((RetryAfter || 0) * 1000) + (waitSeconds * 1000 * Math.random());\n                    // Log\n                    if (this.debug.logRatelimits) {\n                        logger_base_1.Logger.rateLimit(endpoint, msToWait);\n                    }\n                    // Wait\n                    yield base_utils_1.waiter(msToWait);\n                }\n            }\n            // Throw rate limit\n            throw baseError;\n        });\n    }\n    getParam() {\n        return {\n            key: this.key,\n            rateLimitRetry: this.rateLimitRetry,\n            rateLimitRetryAttempts: this.rateLimitRetryAttempts,\n            concurrency: this.concurrency,\n            debug: this.debug\n        };\n    }\n    request(region, endpoint, params, forceError, qs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.key) {\n                throw new errors_1.ApiKeyNotFound();\n            }\n            // Url params\n            params = params || {};\n            params.region = region.toLowerCase();\n            // Format\n            const uri = this.getApiUrl(endpoint, params);\n            // Logger\n            if (this.debug.logTime) {\n                logger_base_1.Logger.start(endpoint, uri);\n            }\n            const options = {\n                uri,\n                method: 'GET',\n                headers: {\n                    Origin: null,\n                    'X-Riot-Token': this.key\n                },\n                qs,\n                useQuerystring: true,\n                resolveWithFullResponse: true,\n                json: true\n            };\n            if (this.debug.logUrls) {\n                logger_base_1.Logger.uri(options, endpoint);\n            }\n            try {\n                const apiResponse = yield this.internalRequest(options);\n                const { body, headers } = apiResponse;\n                return {\n                    rateLimits: this.getRateLimits(headers),\n                    response: body\n                };\n            }\n            catch (e) {\n                if (forceError) {\n                    throw e;\n                }\n                return yield this.retryRateLimit(region, endpoint, params, e);\n            }\n            finally {\n                if (this.debug.logTime) {\n                    logger_base_1.Logger.end(endpoint, uri);\n                }\n            }\n        });\n    }\n}\nexports.BaseApi = BaseApi;\n"]},"metadata":{},"sourceType":"script"}