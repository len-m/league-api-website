{"ast":null,"code":"import { map } from \"jquery\";\nconst key = \"RGAPI-fae5c580-12d3-4a33-b936-108db0853d30\";\nconst proxyUrl = \"https://thingproxy.freeboard.io/fetch/\";\n\nasync function fetchJSON(url) {\n  const data = await fetch(url);\n  return await data.json();\n}\n\nasync function getMatchListJSON(encryptedAccountId) {\n  const riot_api_url = `https://euw1.api.riotgames.com//lol/match/v4/matchlists/by-account/${encryptedAccountId}?api_key=${key}`;\n  const full_url = `${proxyUrl}${riot_api_url}`;\n  const json = await fetchJSON(full_url);\n  return json;\n}\n\nasync function getSummonerJSON(player) {\n  const riot_api_url = `https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/${player}?api_key=${key}`;\n  const full_url = `${proxyUrl}${riot_api_url}`;\n  const json = await fetchJSON(full_url);\n  return json;\n}\n\nasync function getProfileIconId(player) {\n  const json = await getSummonerJSON(player); //////\n\n  const overallLane = getOverallLane(player);\n  console.log(overallLane); ////////////\n\n  return json.profileIconId;\n}\n\nexport async function getPlayerIconPNGLink(player) {\n  const iconId = await getProfileIconId(player);\n  return `//opgg-static.akamaized.net/images/profile_icons/profileIcon${iconId}.jpg?image=q_auto&v=1518361200`; //return `http://ddragon.leagueoflegends.com/cdn/10.15.1/img/profileicon/${iconId}.png`;\n}\nexport async function getPlayerLevel(player) {\n  const json = await getSummonerJSON(player);\n  return json.summonerLevel;\n} //naiv approach, should only be used for generalization\n\nasync function getLane(matchJSON) {\n  const lane = matchJSON.lane;\n  const role = matchJSON.role; //    Role: DUO, DUO_CARRY, DUO_SUPPORT, NONE, and SOLO\n  //    Lane: MID, TOP, BOTTOM, JUNGLE, NONE\n\n  switch (lane) {\n    case \"MID\":\n      switch (role) {\n        case \"SOLO\":\n          return \"mid\";\n\n        default:\n          return \"none\";\n      }\n\n    case \"TOP\":\n      switch (role) {\n        case \"SOLO\":\n          return \"top\";\n\n        default:\n          return \"none\";\n      }\n\n    case \"JUNGLE\":\n      switch (role) {\n        case \"NONE\":\n          return \"jgl\";\n\n        default:\n          return \"none\";\n      }\n\n    case \"BOTTOM\":\n      switch (role) {\n        case \"DUO_SUPPORT\":\n          return \"bot_sup\";\n\n        case \"DUO_CARRY\":\n          return \"bot_adc\";\n\n        default:\n          return \"none\";\n      }\n\n    default:\n      return \"none\";\n  }\n}\n\nexport async function getOverallLane(player) {\n  const summonerInfo = await getSummonerJSON(player);\n  const matchlist = await getMatchListJSON(summonerInfo.accountId);\n  let laneMap = new Map();\n  map.set(\"mid\", 0);\n  map.set(\"top\", 0);\n  map.set(\"jgl\", 0);\n  map.set(\"bot_sup\", 0);\n  map.set(\"bot_adc\", 0);\n  let i = 0;\n  let data = 0;\n  var overallLane = \"mid\";\n\n  while (data < 11) {\n    const currentMatch = matchlist.matches[i];\n    const currentLane = await getLane(currentMatch);\n\n    switch (currentLane) {\n      case \"mid\":\n        map.set(\"mid\", map.get(\"mid\") + 1);\n        data++;\n        break;\n\n      case \"top\":\n        map.set(\"top\", map.get(\"top\") + 1);\n        data++;\n        break;\n\n      case \"jgl\":\n        map.set(\"jgl\", map.get(\"jgl\") + 1);\n        data++;\n        break;\n\n      case \"bot_sup\":\n        map.set(\"bot_sup\", map.get(\"bot_sup\") + 1);\n        data++;\n        break;\n\n      case \"bot_adc\":\n        map.set(\"bot_adc\", map.get(\"bot_adc\") + 1);\n        data++;\n        break;\n      //if lane === \"none\", don't do anything\n    }\n\n    var overallLaneValue = laneMap.get(\"mid\");\n\n    for (let lane of laneMap.keys()) {\n      if (laneMap.get(lane) > overallLane) {\n        overallLane = laneMap.get(lane);\n        overallLane = lane;\n      }\n    }\n\n    ++i;\n\n    if (matchlist.matches[i] === \"undefined\" || i > 30) {\n      return \"none\";\n    }\n  }\n\n  return overallLane;\n}","map":{"version":3,"sources":["C:/website/src/LeagueOfLegendsApi.js"],"names":["map","key","proxyUrl","fetchJSON","url","data","fetch","json","getMatchListJSON","encryptedAccountId","riot_api_url","full_url","getSummonerJSON","player","getProfileIconId","overallLane","getOverallLane","console","log","profileIconId","getPlayerIconPNGLink","iconId","getPlayerLevel","summonerLevel","getLane","matchJSON","lane","role","summonerInfo","matchlist","accountId","laneMap","Map","set","i","currentMatch","matches","currentLane","get","overallLaneValue","keys"],"mappings":"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","sourcesContent":["import { map } from \"jquery\";\r\n\r\nconst key = \"RGAPI-fae5c580-12d3-4a33-b936-108db0853d30\";\r\nconst proxyUrl = \"https://thingproxy.freeboard.io/fetch/\";\r\n\r\nasync function fetchJSON(url) {\r\n    const data = await fetch (url);\r\n    return await data.json();\r\n}\r\n\r\nasync function getMatchListJSON(encryptedAccountId) {\r\n    const riot_api_url = `https://euw1.api.riotgames.com//lol/match/v4/matchlists/by-account/${encryptedAccountId}?api_key=${key}`;\r\n    const full_url = `${proxyUrl}${riot_api_url}`;\r\n    const json = await fetchJSON(full_url);\r\n    return json;\r\n}\r\n\r\nasync function getSummonerJSON(player) {\r\n    const riot_api_url = `https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/${player}?api_key=${key}`;\r\n    const full_url = `${proxyUrl}${riot_api_url}`;\r\n    const json = await fetchJSON(full_url);\r\n    return json;\r\n}\r\n\r\nasync function getProfileIconId(player) {\r\n    const json = await getSummonerJSON(player);\r\n//////\r\n    const overallLane = getOverallLane(player);\r\n    console.log(overallLane); \r\n////////////\r\n    return json.profileIconId;\r\n}\r\n\r\nexport async function getPlayerIconPNGLink(player) {\r\n    const iconId = await getProfileIconId(player);\r\n    return `//opgg-static.akamaized.net/images/profile_icons/profileIcon${iconId}.jpg?image=q_auto&v=1518361200`;\r\n    //return `http://ddragon.leagueoflegends.com/cdn/10.15.1/img/profileicon/${iconId}.png`;\r\n}\r\n\r\nexport async function getPlayerLevel(player) {\r\n    const json = await getSummonerJSON(player);\r\n    return json.summonerLevel;\r\n}\r\n\r\n//naiv approach, should only be used for generalization\r\nasync function getLane(matchJSON) {\r\n    const lane = matchJSON.lane;\r\n    const role = matchJSON.role;\r\n\r\n//    Role: DUO, DUO_CARRY, DUO_SUPPORT, NONE, and SOLO\r\n//    Lane: MID, TOP, BOTTOM, JUNGLE, NONE\r\n\r\n    switch(lane) {\r\n        case \"MID\":\r\n            switch(role) {\r\n                case \"SOLO\":\r\n                    return \"mid\";\r\n                default:\r\n                    return \"none\";\r\n            }\r\n        case \"TOP\":\r\n            switch(role) {\r\n                case \"SOLO\":\r\n                    return \"top\";\r\n                default:\r\n                    return \"none\";\r\n            }\r\n        case \"JUNGLE\":\r\n            switch(role) {\r\n                case \"NONE\":\r\n                    return \"jgl\";\r\n                default:\r\n                    return \"none\";\r\n            }\r\n        case \"BOTTOM\":\r\n            switch(role) {\r\n                case \"DUO_SUPPORT\":\r\n                    return \"bot_sup\";\r\n                case \"DUO_CARRY\":\r\n                    return \"bot_adc\";\r\n                default:\r\n                    return \"none\";\r\n            }\r\n        default:\r\n            return \"none\";\r\n    }\r\n\r\n}\r\n\r\nexport async function getOverallLane(player) {\r\n    const summonerInfo = await getSummonerJSON(player);\r\n    const matchlist = await getMatchListJSON(summonerInfo.accountId);\r\n    \r\n    let laneMap = new Map();\r\n    map.set(\"mid\", 0);\r\n    map.set(\"top\", 0); \r\n    map.set(\"jgl\", 0);\r\n    map.set(\"bot_sup\", 0); \r\n    map.set(\"bot_adc\", 0);\r\n\r\n    let i = 0;\r\n    let data = 0;\r\n    var overallLane = \"mid\";\r\n\r\n    while (data < 11) {\r\n        const currentMatch = matchlist.matches[i];\r\n        const currentLane = await getLane(currentMatch);\r\n        switch(currentLane) {\r\n            case \"mid\":\r\n                map.set(\"mid\", map.get(\"mid\") + 1);\r\n                data++\r\n                break;\r\n            case \"top\":\r\n                map.set(\"top\", map.get(\"top\") + 1);\r\n                data++\r\n                break;\r\n            case \"jgl\":\r\n                map.set(\"jgl\", map.get(\"jgl\") + 1);\r\n                data++\r\n                break;\r\n            case \"bot_sup\":\r\n                map.set(\"bot_sup\", map.get(\"bot_sup\") + 1);\r\n                data++\r\n                break;\r\n            case \"bot_adc\":\r\n                map.set(\"bot_adc\", map.get(\"bot_adc\") + 1);\r\n                data++\r\n                break;\r\n            //if lane === \"none\", don't do anything\r\n        }\r\n\r\n        var overallLaneValue = laneMap.get(\"mid\");\r\n        for (let lane of laneMap.keys()) {\r\n            if (laneMap.get(lane) > overallLane) {\r\n                overallLane = laneMap.get(lane);\r\n                overallLane = lane;\r\n            }\r\n        }\r\n        ++i;\r\n        if (matchlist.matches[i] === \"undefined\" || i > 30) {\r\n            return \"none\"\r\n        }\r\n    }\r\n    return overallLane;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}