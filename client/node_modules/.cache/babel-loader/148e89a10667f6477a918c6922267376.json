{"ast":null,"code":"// Private properties\nconst find = /([a-z0-9]+|[A-Z0-9]+[a-z0-9]*|[A-Z0-9][a-z0-9]*([A-Z0-9][a-z0-9]*)*)/g;\nconst findNumber = /[0-9]{1,}/g;\nconst defaultSeparator = '_';\nlet setNext = false; // Format\n\nconst format = (val, next) => {\n  // Comprobe\n  if (setNext) {\n    setNext = false;\n    return '';\n  } // Type\n\n\n  if (typeof val !== 'string') return val; // Replace\n\n  const cond1 = val.match(findNumber);\n  const cond2 = next && next.match(findNumber); // Comprobe\n\n  if (cond1 && cond2) {\n    // Set next\n    setNext = true; // Response\n\n    return `${val}.${next}`;\n  } // Return\n\n\n  return val;\n}; // DeCamelize\n\n\nconst DeCamelize = (value, separator = '_') => {\n  // Comprobe\n  if (typeof value !== 'string') return null; // Find\n\n  const match = value.match(find); // Response\n\n  const response = match.map((val, index) => {\n    // Properties\n    const next = match[index + 1]; // Response\n\n    return format(val, next);\n  }).filter(val => val.length > 0).join(separator || defaultSeparator); // Separator\n  // Return\n\n  return response.toLowerCase();\n}; // Export\n\n\nmodule.exports = DeCamelize;","map":{"version":3,"sources":["C:/website/node_modules/camelcasejs/lib/DeCamelize.js"],"names":["find","findNumber","defaultSeparator","setNext","format","val","next","cond1","match","cond2","DeCamelize","value","separator","response","map","index","filter","length","join","toLowerCase","module","exports"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,uEAAb;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAIC,OAAO,GAAG,KAAd,C,CAEA;;AACA,MAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC5B;AACA,MAAIH,OAAJ,EAAa;AACXA,IAAAA,OAAO,GAAG,KAAV;AACA,WAAO,EAAP;AACD,GAL2B,CAM5B;;;AACA,MAAI,OAAOE,GAAP,KAAe,QAAnB,EAA6B,OAAOA,GAAP,CAPD,CAQ5B;;AACA,QAAME,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAUP,UAAV,CAAd;AACA,QAAMQ,KAAK,GAAGH,IAAI,IAAIA,IAAI,CAACE,KAAL,CAAWP,UAAX,CAAtB,CAV4B,CAW5B;;AACA,MAAIM,KAAK,IAAIE,KAAb,EAAoB;AAClB;AACAN,IAAAA,OAAO,GAAG,IAAV,CAFkB,CAGlB;;AACA,WAAQ,GAAEE,GAAI,IAAGC,IAAK,EAAtB;AACD,GAjB2B,CAkB5B;;;AACA,SAAOD,GAAP;AACD,CApBD,C,CAqBA;;;AACA,MAAMK,UAAU,GAAG,CAACC,KAAD,EAAQC,SAAS,GAAG,GAApB,KAA4B;AAC7C;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B,OAAO,IAAP,CAFc,CAG7C;;AACA,QAAMH,KAAK,GAAGG,KAAK,CAACH,KAAN,CAAYR,IAAZ,CAAd,CAJ6C,CAK7C;;AACA,QAAMa,QAAQ,GAAGL,KAAK,CAACM,GAAN,CAAU,CAACT,GAAD,EAAMU,KAAN,KAAgB;AACzC;AACA,UAAMT,IAAI,GAAGE,KAAK,CAACO,KAAK,GAAG,CAAT,CAAlB,CAFyC,CAGzC;;AACA,WAAOX,MAAM,CAACC,GAAD,EAAMC,IAAN,CAAb;AACD,GALgB,EAMdU,MANc,CAMPX,GAAG,IAAIA,GAAG,CAACY,MAAJ,GAAa,CANb,EAOdC,IAPc,CAOTN,SAAS,IAAIV,gBAPJ,CAAjB,CAN6C,CAaL;AACxC;;AACA,SAAOW,QAAQ,CAACM,WAAT,EAAP;AACD,CAhBD,C,CAkBA;;;AACAC,MAAM,CAACC,OAAP,GAAiBX,UAAjB","sourcesContent":["// Private properties\nconst find = /([a-z0-9]+|[A-Z0-9]+[a-z0-9]*|[A-Z0-9][a-z0-9]*([A-Z0-9][a-z0-9]*)*)/g;\nconst findNumber = /[0-9]{1,}/g;\nconst defaultSeparator = '_';\nlet setNext = false;\n\n// Format\nconst format = (val, next) => {\n  // Comprobe\n  if (setNext) {\n    setNext = false;\n    return '';\n  }\n  // Type\n  if (typeof val !== 'string') return val;\n  // Replace\n  const cond1 = val.match(findNumber);\n  const cond2 = next && next.match(findNumber);\n  // Comprobe\n  if (cond1 && cond2) {\n    // Set next\n    setNext = true;\n    // Response\n    return `${val}.${next}`;\n  }\n  // Return\n  return val;\n};\n// DeCamelize\nconst DeCamelize = (value, separator = '_') => {\n  // Comprobe\n  if (typeof value !== 'string') return null;\n  // Find\n  const match = value.match(find);\n  // Response\n  const response = match.map((val, index) => {\n    // Properties\n    const next = match[index + 1];\n    // Response\n    return format(val, next);\n  })\n    .filter(val => val.length > 0)\n    .join(separator || defaultSeparator); // Separator\n  // Return\n  return response.toLowerCase();\n};\n\n// Export\nmodule.exports = DeCamelize;\n"]},"metadata":{},"sourceType":"script"}