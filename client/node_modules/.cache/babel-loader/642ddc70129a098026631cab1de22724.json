{"ast":null,"code":"import { $, jQuery } from 'jquery';\nconst key = \"RGAPI-de04b4c9-ddf1-43d4-b60c-8ad4f396cb51\";\nconst proxyUrl = \"https://thingproxy.freeboard.io/fetch/\";\n\nasync function fetchJSON(url) {\n  const data = await fetch(url);\n  return await data.json();\n}\n\nasync function getMatchListJSON(encryptedAccountId) {\n  const riot_api_url = `https://euw1.api.riotgames.com//lol/match/v4/matchlists/by-account/${encryptedAccountId}?api_key=${key}`;\n  const full_url = `${proxyUrl}${riot_api_url}`; //const json = await fetchJSON(full_url);\n\n  fetch(full_url).then(function (response) {\n    if (response !== undefined && response.matches !== undefined && response.matches[0] !== undefined) {\n      const strippedJSON = response.get(\"matches\").getAsJsonArray();\n      let latestMatches = resonse.matches[0];\n\n      for (let i = 1; i < 30; i++) {\n        if (response.matches[i] !== undefined) {\n          $.extend(latestMatches, response.matches[i]);\n        }\n      }\n\n      return latestMatches;\n    }\n  }).catch(function (error) {\n    console.log(\"error: \" + error);\n  });\n  return undefined;\n}\n\nasync function getSummonerJSON(player) {\n  const riot_api_url = `https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/${player}?api_key=${key}`;\n  const full_url = `${proxyUrl}${riot_api_url}`;\n  const json = await fetchJSON(full_url);\n  return json;\n}\n\nasync function getProfileIconId(player) {\n  const json = await getSummonerJSON(player);\n  return json.profileIconId;\n}\n\nexport async function getPlayerIconPNGLink(player) {\n  const iconId = await getProfileIconId(player);\n  return `//opgg-static.akamaized.net/images/profile_icons/profileIcon${iconId}.jpg?image=q_auto&v=1518361200`; //return `http://ddragon.leagueoflegends.com/cdn/10.15.1/img/profileicon/${iconId}.png`;\n}\nexport async function getPlayerLevel(player) {\n  const json = await getSummonerJSON(player);\n  return json.summonerLevel;\n} //naiv approach, should only be used for generalization\n\nasync function getLane(matchJSON) {\n  const lane = matchJSON.lane;\n  const role = matchJSON.role; //    Role: DUO, DUO_CARRY, DUO_SUPPORT, NONE, and SOLO\n  //    Lane: MID, TOP, BOTTOM, JUNGLE, NONE\n\n  if (lane === \"MID\" && role === \"SOLO\") {\n    return \"mid\";\n  } else if (lane === \"TOP\" && role === \"SOLO\") {\n    return \"top\";\n  } else if (lane === \"JUNGLE\" && role === \"NONE\") {\n    return \"jgl\";\n  } else if (lane === \"BOTTOM\" && role === \"DUO_SUPPORT\") {\n    return \"sup\";\n  } else if (lane === \"BOTTOM\" && role === \"DUO_CARRY\") {\n    return \"adc\";\n  } else {\n    return \"none\";\n  }\n}\n\nexport async function getOverallLane(player) {\n  const summonerInfo = await getSummonerJSON(player);\n  const matchlist = await getMatchListJSON(summonerInfo.accountId);\n  return await getLane(matchlist.matches[0]);\n  /*\r\n  const summonerInfo = await getSummonerJSON(player);\r\n  const matchlist = await getMatchListJSON(summonerInfo.accountId);\r\n  \r\n  let laneMap = new Map();\r\n  laneMap.set(\"mid\", 0);\r\n  laneMap.set(\"top\", 0); \r\n  laneMap.set(\"jgl\", 0);\r\n  laneMap.set(\"sup\", 0); \r\n  laneMap.set(\"adc\", 0);\r\n  let overallLane = \"none\";\r\n    let i = 0;\r\n  let data = 0;\r\n  while (data < 11) {\r\n      if (matchlist.matches !== undefined && matchlist.matches[i] !== undefined && i < 30) {\r\n          const currentLane = await getLane(matchlist.matches[i]);\r\n          if (currentLane !== \"none\") {\r\n              laneMap.set(currentLane, laneMap.get(currentLane) + 1);\r\n              data++;\r\n          }\r\n      }\r\n      i++;\r\n  }\r\n  let overallLaneValue = laneMap.get(\"mid\");\r\n  for (let lane of laneMap.keys()) {\r\n      if (laneMap.get(lane) > overallLaneValue) {\r\n          overallLane = laneMap.get(lane);\r\n      }\r\n  }\r\n  return overallLane;*/\n}","map":{"version":3,"sources":["C:/website/src/LeagueOfLegendsApi.js"],"names":["$","jQuery","key","proxyUrl","fetchJSON","url","data","fetch","json","getMatchListJSON","encryptedAccountId","riot_api_url","full_url","then","response","undefined","matches","strippedJSON","get","getAsJsonArray","latestMatches","resonse","i","extend","catch","error","console","log","getSummonerJSON","player","getProfileIconId","profileIconId","getPlayerIconPNGLink","iconId","getPlayerLevel","summonerLevel","getLane","matchJSON","lane","role","getOverallLane","summonerInfo","matchlist","accountId"],"mappings":"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","sourcesContent":["import {$,jQuery} from 'jquery';\r\n\r\nconst key = \"RGAPI-de04b4c9-ddf1-43d4-b60c-8ad4f396cb51\";\r\nconst proxyUrl = \"https://thingproxy.freeboard.io/fetch/\";\r\n\r\nasync function fetchJSON(url) {\r\n    const data = await fetch (url);\r\n    return await data.json();\r\n}\r\n\r\nasync function getMatchListJSON(encryptedAccountId) {\r\n    const riot_api_url = `https://euw1.api.riotgames.com//lol/match/v4/matchlists/by-account/${encryptedAccountId}?api_key=${key}`;\r\n    const full_url = `${proxyUrl}${riot_api_url}`;\r\n    //const json = await fetchJSON(full_url);\r\n    \r\n    fetch (full_url).then (function (response) {\r\n        if (response !== undefined && response.matches !== undefined && response.matches[0] !== undefined) {\r\n            const strippedJSON = response.get(\"matches\").getAsJsonArray();\r\n            let latestMatches = resonse.matches[0];\r\n            for (let i = 1; i < 30; i++) {\r\n                if (response.matches[i] !== undefined) {\r\n                    $.extend(latestMatches, response.matches[i]);\r\n                }\r\n            }\r\n            return latestMatches;\r\n            \r\n        }\r\n        \r\n        \r\n    }).catch (function (error) {\r\n        console.log (\"error: \" + error);\r\n    });\r\n    \r\n    return undefined;\r\n\r\n}\r\n\r\nasync function getSummonerJSON(player) {\r\n    const riot_api_url = `https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/${player}?api_key=${key}`;\r\n    const full_url = `${proxyUrl}${riot_api_url}`;\r\n    const json = await fetchJSON(full_url);\r\n    return json;\r\n}\r\n\r\nasync function getProfileIconId(player) {\r\n    const json = await getSummonerJSON(player);\r\n    return json.profileIconId;\r\n}\r\n\r\nexport async function getPlayerIconPNGLink(player) {\r\n    const iconId = await getProfileIconId(player);\r\n    return `//opgg-static.akamaized.net/images/profile_icons/profileIcon${iconId}.jpg?image=q_auto&v=1518361200`;\r\n    //return `http://ddragon.leagueoflegends.com/cdn/10.15.1/img/profileicon/${iconId}.png`;\r\n}\r\n\r\nexport async function getPlayerLevel(player) {\r\n    const json = await getSummonerJSON(player);\r\n    return json.summonerLevel;\r\n}\r\n\r\n//naiv approach, should only be used for generalization\r\nasync function getLane(matchJSON) {\r\n    const lane = matchJSON.lane;\r\n    const role = matchJSON.role;\r\n\r\n//    Role: DUO, DUO_CARRY, DUO_SUPPORT, NONE, and SOLO\r\n//    Lane: MID, TOP, BOTTOM, JUNGLE, NONE\r\n    if (lane === \"MID\" && role === \"SOLO\") {\r\n        return \"mid\";\r\n    } else if (lane === \"TOP\" && role === \"SOLO\") {\r\n        return \"top\";\r\n    } else if (lane === \"JUNGLE\" && role === \"NONE\") {\r\n        return \"jgl\";\r\n    } else if (lane === \"BOTTOM\" && role === \"DUO_SUPPORT\") {\r\n        return \"sup\";\r\n    } else if (lane === \"BOTTOM\" && role === \"DUO_CARRY\") {\r\n        return \"adc\";\r\n    } else {\r\n        return \"none\";\r\n    }\r\n}\r\n\r\nexport async function getOverallLane(player) {\r\n    const summonerInfo = await getSummonerJSON(player);\r\n    const matchlist = await getMatchListJSON(summonerInfo.accountId);\r\n    return await getLane(matchlist.matches[0]);\r\n\r\n\r\n    /*\r\n    const summonerInfo = await getSummonerJSON(player);\r\n    const matchlist = await getMatchListJSON(summonerInfo.accountId);\r\n    \r\n    let laneMap = new Map();\r\n    laneMap.set(\"mid\", 0);\r\n    laneMap.set(\"top\", 0); \r\n    laneMap.set(\"jgl\", 0);\r\n    laneMap.set(\"sup\", 0); \r\n    laneMap.set(\"adc\", 0);\r\n    let overallLane = \"none\";\r\n\r\n    let i = 0;\r\n    let data = 0;\r\n    while (data < 11) {\r\n        if (matchlist.matches !== undefined && matchlist.matches[i] !== undefined && i < 30) {\r\n            const currentLane = await getLane(matchlist.matches[i]);\r\n            if (currentLane !== \"none\") {\r\n                laneMap.set(currentLane, laneMap.get(currentLane) + 1);\r\n                data++;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    let overallLaneValue = laneMap.get(\"mid\");\r\n    for (let lane of laneMap.keys()) {\r\n        if (laneMap.get(lane) > overallLaneValue) {\r\n            overallLane = laneMap.get(lane);\r\n        }\r\n    }\r\n    return overallLane;*/\r\n}"]},"metadata":{},"sourceType":"module"}