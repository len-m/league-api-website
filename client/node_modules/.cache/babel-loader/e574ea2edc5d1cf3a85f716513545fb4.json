{"ast":null,"code":"var _jsxFileName = \"C:\\\\website\\\\client\\\\src\\\\App\\\\pages\\\\myslibros\\\\LeagueProfile.js\";\n//TODO: own css for myslibros page\nimport React, { useEffect, useState } from 'react';\nimport '../../App.css';\nimport { getPlayerIconPNGLink, getPlayerLevel, getFlexRank, get_Solo_Duo_Rank } from './LeagueOfLegendsApi.js';\n/**\r\n * League player profile for Myslibros\r\n */\n\nfunction LeagueProfile(props) {\n  /*\r\n      useEffect(() => {\r\n          fetchPlayers();\r\n      }, []); \r\n      */\n  const [player, setPlayer] = useState({});\n  useEffect(() => {\n    let post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName; //send post request to server\n    //server tells us if user is in cache\n    //send get request to server\n    //in server it checks if user is cached -> if yes return -> if no api call and return\n\n    getRequest(post_url); //sendPostRequest(post_url);\n    //retrievePostRequest(post_url);\n  }, []);\n\n  const getRequest = async url => {\n    fetch(url).then(res => res.json()).then(playerJSON => {\n      setPlayer(playerJSON);\n      console.log(playerJSON);\n      console.log(player);\n    });\n  };\n  /*\r\n      const sendPostRequest = async (url) => {\r\n          var xmlhttp = new XMLHttpRequest();\r\n          xmlhttp.open(\"POST\", url);\r\n          xmlhttp.withCredentials = true;\r\n          xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n          //data to be cached\r\n          const json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\n          xmlhttp.send(JSON.stringify(json));\r\n      };\r\n  \r\n      \r\n      const retrievePostRequest = async (url) => {\r\n          const rawData = await fetch(url, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              }\r\n          });\r\n          const content = await rawData.json();\r\n          console.log(content);\r\n      }; \r\n  */\n\n  /*\r\n  \n  //BAD !!! TODO: http://localhost:3001/api/leagueoflegends/players/{playerName} post fetch data\r\n   let player = {}; \r\n   useEffect(() => {\r\n       fetch('/api/leagueoflegends/players')\r\n       .then(res => res.json())\r\n       .then(players => {\r\n           let isCached = false;\r\n           for (var i = 0; i < players.length; i++) {\r\n               if (players[i].summonerName === props.leagueName) {\r\n                   player = players[i];\r\n                   isCached = true;\r\n                   break;\r\n               }\r\n           }\r\n           if (isCached === false) {\r\n               console.log(props.leagueName + \" musst be cached\");\r\n               //cache player\r\n  \n     \r\n               var post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\r\n                 //send post request\r\n               var xmlhttp = new XMLHttpRequest();\r\n               xmlhttp.onreadystatechange = function () { };\r\n               xmlhttp.open(\"POST\", post_url);\r\n               xmlhttp.withCredentials = true;\r\n               xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n               const json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\n               xmlhttp.send({});\r\n                 //retreve post request\r\n               (async () => {\r\n                   const rawResponse = await fetch(post_url, {\r\n                     method: 'POST',\r\n                     headers: {\r\n                       'Accept': 'application/json',\r\n                       'Content-Type': 'application/json'\r\n                     }\r\n                     //,\r\n                     //body: JSON.stringify({a: 1, b: 'Textual content'})\r\n                   });\r\n                   //const content = await rawResponse.json();\r\n                   //console.log(rawResponse);\r\n                 })();\r\n             }\r\n       }).catch((error) => {\r\n           //player isnt in cache\r\n           //=> add him to cache\r\n           console.error('Error:', error);\r\n       });\r\n   }, [])\r\n   */\n\n  /*const fetchPlayers = async () => {\r\n      var json = {};\r\n      json.name = props.leagueName;\r\n      json.level = fetch('/api/leagueoflegends/players')\r\n          .then(res => res.json())\r\n          .then(players => ) \r\n          \r\n          \r\n          //await getPlayerLevel(props.leagueName);\r\n      json.iconSrc = await getPlayerIconPNGLink(props.leagueName);\r\n      json.flexRank = await getFlexRank(props.leagueName);\r\n      json.soloDuoRank = await get_Solo_Duo_Rank(props.leagueName);\r\n      //json.lane = await getOverallLane(props.leagueName);\r\n      const player = JSON.parse(JSON.stringify(json));\r\n      setPlayer(player);\r\n    };*/\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile-header-picture-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-profile-header-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"league-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default LeagueProfile;","map":{"version":3,"sources":["C:/website/client/src/App/pages/myslibros/LeagueProfile.js"],"names":["React","useEffect","useState","getPlayerIconPNGLink","getPlayerLevel","getFlexRank","get_Solo_Duo_Rank","LeagueProfile","props","player","setPlayer","post_url","leagueName","getRequest","url","fetch","then","res","json","playerJSON","console","log"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,SAAQC,oBAAR,EAA8BC,cAA9B,EAA8CC,WAA9C,EAA2DC,iBAA3D,QAAmF,yBAAnF;AAEA;;;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC9B;;;;;AAKI,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,GAAG,uDAAuDH,KAAK,CAACI,UAA5E,CADY,CAGZ;AACA;AAGA;AACA;;AAEAC,IAAAA,UAAU,CAACF,QAAD,CAAV,CAVY,CAiBZ;AACA;AAGH,GArBQ,EAqBN,EArBM,CAAT;;AAuBA,QAAME,UAAU,GAAG,MAAOC,GAAP,IAAe;AAC9BC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,UAAU,IAAI;AAChBT,MAAAA,SAAS,CAACS,UAAD,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;AACH,KAND;AAOH,GARD;AAUJ;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DC;;;;;;;;;;;;;;;;;;AAiBA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAII;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,eAUI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ;AAqBH;;AAED,eAAeF,aAAf","sourcesContent":["//TODO: own css for myslibros page\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../../App.css';\r\nimport {getPlayerIconPNGLink, getPlayerLevel, getFlexRank, get_Solo_Duo_Rank} from './LeagueOfLegendsApi.js';\r\n\r\n/**\r\n * League player profile for Myslibros\r\n */\r\nfunction LeagueProfile(props) {\r\n/*\r\n    useEffect(() => {\r\n        fetchPlayers();\r\n    }, []); \r\n    */\r\n    const [player, setPlayer] = useState({});\r\n\r\n   \r\n    useEffect(() => {\r\n        let post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\r\n       \r\n        //send post request to server\r\n        //server tells us if user is in cache\r\n\r\n\r\n        //send get request to server\r\n        //in server it checks if user is cached -> if yes return -> if no api call and return\r\n\r\n        getRequest(post_url);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //sendPostRequest(post_url);\r\n        //retrievePostRequest(post_url);\r\n\r\n\r\n    }, []);\r\n\r\n    const getRequest = async (url) => {\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(playerJSON => {\r\n            setPlayer(playerJSON);\r\n            console.log(playerJSON);\r\n            console.log(player);\r\n        });\r\n    }\r\n\r\n/*\r\n    const sendPostRequest = async (url) => {\r\n        var xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open(\"POST\", url);\r\n        xmlhttp.withCredentials = true;\r\n        xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        //data to be cached\r\n        const json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\n        xmlhttp.send(JSON.stringify(json));\r\n    };\r\n\r\n    \r\n    const retrievePostRequest = async (url) => {\r\n        const rawData = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        const content = await rawData.json();\r\n        console.log(content);\r\n    }; \r\n*/\r\n\r\n\r\n\r\n   /*\r\n\r\n\r\n   //BAD !!! TODO: http://localhost:3001/api/leagueoflegends/players/{playerName} post fetch data\r\n    let player = {}; \r\n    useEffect(() => {\r\n        fetch('/api/leagueoflegends/players')\r\n        .then(res => res.json())\r\n        .then(players => {\r\n            let isCached = false;\r\n            for (var i = 0; i < players.length; i++) {\r\n                if (players[i].summonerName === props.leagueName) {\r\n                    player = players[i];\r\n                    isCached = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isCached === false) {\r\n                console.log(props.leagueName + \" musst be cached\");\r\n                //cache player\r\n\r\n\r\n\r\n    \r\n                var post_url = \"http://localhost:3001/api/leagueoflegends/players/\" + props.leagueName;\r\n\r\n                //send post request\r\n                var xmlhttp = new XMLHttpRequest();\r\n                xmlhttp.onreadystatechange = function () { };\r\n                xmlhttp.open(\"POST\", post_url);\r\n                xmlhttp.withCredentials = true;\r\n                xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                const json = {\"summonerName\": props.leagueName, \"id\" : \"3\"};\r\n                xmlhttp.send({});\r\n\r\n                //retreve post request\r\n                (async () => {\r\n                    const rawResponse = await fetch(post_url, {\r\n                      method: 'POST',\r\n                      headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                      }\r\n                      //,\r\n                      //body: JSON.stringify({a: 1, b: 'Textual content'})\r\n                    });\r\n                    //const content = await rawResponse.json();\r\n                    //console.log(rawResponse);\r\n                  })();\r\n\r\n            }\r\n        }).catch((error) => {\r\n            //player isnt in cache\r\n            //=> add him to cache\r\n            console.error('Error:', error);\r\n        });\r\n    }, [])\r\n\r\n  */\r\n\r\n    \r\n        \r\n\r\n    /*const fetchPlayers = async () => {\r\n        var json = {};\r\n        json.name = props.leagueName;\r\n        json.level = fetch('/api/leagueoflegends/players')\r\n            .then(res => res.json())\r\n            .then(players => ) \r\n            \r\n            \r\n            //await getPlayerLevel(props.leagueName);\r\n        json.iconSrc = await getPlayerIconPNGLink(props.leagueName);\r\n        json.flexRank = await getFlexRank(props.leagueName);\r\n        json.soloDuoRank = await get_Solo_Duo_Rank(props.leagueName);\r\n        //json.lane = await getOverallLane(props.leagueName);\r\n        const player = JSON.parse(JSON.stringify(json));\r\n        setPlayer(player);\r\n      };*/\r\n    \r\n    return (\r\n        <div className=\"league-profile\">\r\n            <div className=\"league-profile-header\">\r\n                <div className=\"league-profile-header-picture-container\">\r\n                    {/*<img className=\"league-profile-picture\" src={player.iconSrc} alt=\"\"></img>*/}\r\n                </div>\r\n                <div className=\"league-profile-header-text\">\r\n                    {/*<h1>{player.name}</h1>\r\n                    <h1>Level: {player.level}</h1>*/}\r\n                </div>\r\n            </div>\r\n            <div className=\"league-info\">\r\n                {\r\n                    //img for solo duo rank: `opgg-static.akamaized.net/images/medals/${player.soloDuoRank}.png?image=q_auto&v=1`\r\n                    //img for flex: `opgg-static.akamaized.net/images/medals/${player.flexRank}.png?image=q_auto&v=1`\r\n                }\r\n                {/*<h1>{player.soloDuoRank}</h1>\r\n                <h1>{player.flexRank}</h1>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeagueProfile;"]},"metadata":{},"sourceType":"module"}