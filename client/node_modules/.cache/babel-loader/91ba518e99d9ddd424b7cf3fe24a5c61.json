{"ast":null,"code":"// Private properties\nconst find = /([0-9]{1,}(\\.|-)[0-9]{1,})|[a-zA-Z]{1,}|[0-9]{1,}/g;\nconst findNumber = /([0-9]{1,})_([0-9]{1,})/g; // CamelCase\n// Static class\n\nclass CamelCase {\n  // Public methods\n  static CamelCase(value) {\n    // Verif type\n    // Convert string\n    if (typeof value === 'string') return CamelCase._ConvertString(value); // Convert array\n\n    if (Array.isArray(value)) return CamelCase._ConvertArray(value); // Else null\n\n    return null;\n  } // Private Methods\n\n\n  static _ConvertArray(array) {\n    // As string\n    const characters = array.map(val => CamelCase._firstChar(val)); // Return\n\n    return CamelCase._ConvertString(characters.join(''));\n  }\n\n  static _ConvertString(val) {\n    // Convert\n    const convertion = val.match(find).map(value => CamelCase._firstChar(value)); // Return\n\n    return CamelCase._writeString(convertion);\n  }\n  /**\n   * writeString\n   * @description Return converted value\n   * @param {string} value\n   */\n\n\n  static _writeString(value, separator = '_') {\n    // response\n    const response = value.map((val, index) => {\n      // Conditions\n      const current = val.match(findNumber);\n      const next = value[index + 1] ? value[index + 1].match(findNumber) : false; // Comprobe numbers\n\n      if (current && next) {\n        return `${val}${separator}`;\n      } // Return\n\n\n      return val;\n    }); // Return\n\n    return CamelCase._firstChar(response.join(''), 'toLowerCase');\n  }\n  /**\n   * firstChar\n   * @param {string} val Value to convert\n   * @description Convert first character to upper case\n   * @returns String\n   */\n\n\n  static _firstChar(val, method = 'toUpperCase') {\n    // Comprobe\n    if (typeof val !== 'string') return val; // Properties\n\n    const first = val.charAt(0)[method]();\n    const value = val.slice(1); // Response\n\n    const response = `${first}${value}`; // Return\n\n    return CamelCase.format(response);\n  }\n  /**\n   * replaceGlobal\n   * @description Return string replace\n   * @param {string} val\n   */\n\n\n  static format(val) {\n    // Type\n    if (typeof val !== 'string') return val; // Replace\n\n    const replace = val.replace(/(\\.|-){1,}/g, '_');\n    return replace;\n  }\n\n} // Export\n\n\nmodule.exports = CamelCase;","map":{"version":3,"sources":["C:/website/node_modules/camelcasejs/lib/CamelCase.js"],"names":["find","findNumber","CamelCase","value","_ConvertString","Array","isArray","_ConvertArray","array","characters","map","val","_firstChar","join","convertion","match","_writeString","separator","response","index","current","next","method","first","charAt","slice","format","replace","module","exports"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,oDAAb;AACA,MAAMC,UAAU,GAAG,0BAAnB,C,CAEA;AACA;;AACA,MAAMC,SAAN,CAAgB;AACd;AACA,SAAOA,SAAP,CAAiBC,KAAjB,EAAwB;AACtB;AACA;AACA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOD,SAAS,CAACE,cAAV,CAAyBD,KAAzB,CAAP,CAHT,CAItB;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B,OAAOD,SAAS,CAACK,aAAV,CAAwBJ,KAAxB,CAAP,CALJ,CAMtB;;AACA,WAAO,IAAP;AACD,GAVa,CAWd;;;AACA,SAAOI,aAAP,CAAqBC,KAArB,EAA4B;AAC1B;AACA,UAAMC,UAAU,GAAGD,KAAK,CAACE,GAAN,CAAUC,GAAG,IAAIT,SAAS,CAACU,UAAV,CAAqBD,GAArB,CAAjB,CAAnB,CAF0B,CAG1B;;AACA,WAAOT,SAAS,CAACE,cAAV,CAAyBK,UAAU,CAACI,IAAX,CAAgB,EAAhB,CAAzB,CAAP;AACD;;AACD,SAAOT,cAAP,CAAsBO,GAAtB,EAA2B;AACzB;AACA,UAAMG,UAAU,GAAGH,GAAG,CAACI,KAAJ,CAAUf,IAAV,EAAgBU,GAAhB,CAAoBP,KAAK,IAAID,SAAS,CAACU,UAAV,CAAqBT,KAArB,CAA7B,CAAnB,CAFyB,CAGzB;;AACA,WAAOD,SAAS,CAACc,YAAV,CAAuBF,UAAvB,CAAP;AACD;AACD;;;;;;;AAKA,SAAOE,YAAP,CAAoBb,KAApB,EAA2Bc,SAAS,GAAG,GAAvC,EAA4C;AAC1C;AACA,UAAMC,QAAQ,GAAGf,KAAK,CAACO,GAAN,CAAU,CAACC,GAAD,EAAMQ,KAAN,KAAgB;AACzC;AACA,YAAMC,OAAO,GAAGT,GAAG,CAACI,KAAJ,CAAUd,UAAV,CAAhB;AACA,YAAMoB,IAAI,GAAGlB,KAAK,CAACgB,KAAK,GAAG,CAAT,CAAL,GAAmBhB,KAAK,CAACgB,KAAK,GAAG,CAAT,CAAL,CAAiBJ,KAAjB,CAAuBd,UAAvB,CAAnB,GAAwD,KAArE,CAHyC,CAIzC;;AACA,UAAImB,OAAO,IAAIC,IAAf,EAAqB;AACnB,eAAQ,GAAEV,GAAI,GAAEM,SAAU,EAA1B;AACD,OAPwC,CAQzC;;;AACA,aAAON,GAAP;AACD,KAVgB,CAAjB,CAF0C,CAa1C;;AACA,WAAOT,SAAS,CAACU,UAAV,CAAqBM,QAAQ,CAACL,IAAT,CAAc,EAAd,CAArB,EAAwC,aAAxC,CAAP;AACD;AACD;;;;;;;;AAMA,SAAOD,UAAP,CAAkBD,GAAlB,EAAuBW,MAAM,GAAG,aAAhC,EAA+C;AAC7C;AACA,QAAI,OAAOX,GAAP,KAAe,QAAnB,EAA6B,OAAOA,GAAP,CAFgB,CAG7C;;AACA,UAAMY,KAAK,GAAGZ,GAAG,CAACa,MAAJ,CAAW,CAAX,EAAcF,MAAd,GAAd;AACA,UAAMnB,KAAK,GAAGQ,GAAG,CAACc,KAAJ,CAAU,CAAV,CAAd,CAL6C,CAM7C;;AACA,UAAMP,QAAQ,GAAI,GAAEK,KAAM,GAAEpB,KAAM,EAAlC,CAP6C,CAQ7C;;AACA,WAAOD,SAAS,CAACwB,MAAV,CAAiBR,QAAjB,CAAP;AACD;AACD;;;;;;;AAKA,SAAOQ,MAAP,CAAcf,GAAd,EAAmB;AACjB;AACA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAOA,GAAP,CAFZ,CAGjB;;AACA,UAAMgB,OAAO,GAAGhB,GAAG,CAACgB,OAAJ,CAAY,aAAZ,EAA2B,GAA3B,CAAhB;AACA,WAAOA,OAAP;AACD;;AAzEa,C,CA4EhB;;;AACAC,MAAM,CAACC,OAAP,GAAiB3B,SAAjB","sourcesContent":["// Private properties\nconst find = /([0-9]{1,}(\\.|-)[0-9]{1,})|[a-zA-Z]{1,}|[0-9]{1,}/g;\nconst findNumber = /([0-9]{1,})_([0-9]{1,})/g;\n\n// CamelCase\n// Static class\nclass CamelCase {\n  // Public methods\n  static CamelCase(value) {\n    // Verif type\n    // Convert string\n    if (typeof value === 'string') return CamelCase._ConvertString(value);\n    // Convert array\n    if (Array.isArray(value)) return CamelCase._ConvertArray(value);\n    // Else null\n    return null;\n  }\n  // Private Methods\n  static _ConvertArray(array) {\n    // As string\n    const characters = array.map(val => CamelCase._firstChar(val));\n    // Return\n    return CamelCase._ConvertString(characters.join(''));\n  }\n  static _ConvertString(val) {\n    // Convert\n    const convertion = val.match(find).map(value => CamelCase._firstChar(value));\n    // Return\n    return CamelCase._writeString(convertion);\n  }\n  /**\n   * writeString\n   * @description Return converted value\n   * @param {string} value\n   */\n  static _writeString(value, separator = '_') {\n    // response\n    const response = value.map((val, index) => {\n      // Conditions\n      const current = val.match(findNumber);\n      const next = value[index + 1] ? value[index + 1].match(findNumber) : false;\n      // Comprobe numbers\n      if (current && next) {\n        return `${val}${separator}`;\n      }\n      // Return\n      return val;\n    });\n    // Return\n    return CamelCase._firstChar(response.join(''), 'toLowerCase');\n  }\n  /**\n   * firstChar\n   * @param {string} val Value to convert\n   * @description Convert first character to upper case\n   * @returns String\n   */\n  static _firstChar(val, method = 'toUpperCase') {\n    // Comprobe\n    if (typeof val !== 'string') return val;\n    // Properties\n    const first = val.charAt(0)[method]();\n    const value = val.slice(1);\n    // Response\n    const response = `${first}${value}`;\n    // Return\n    return CamelCase.format(response);\n  }\n  /**\n   * replaceGlobal\n   * @description Return string replace\n   * @param {string} val\n   */\n  static format(val) {\n    // Type\n    if (typeof val !== 'string') return val;\n    // Replace\n    const replace = val.replace(/(\\.|-){1,}/g, '_');\n    return replace;\n  }\n}\n\n// Export\nmodule.exports = CamelCase;\n"]},"metadata":{},"sourceType":"script"}